{"version":3,"sources":["finalEvaluationController.js"],"names":["require","sequelize","FinalEvaluation","Certificate","exports","calculateFinalEvaluations","req","res","query","findAll","where","status","passedUsers","evaluation","findOne","user_id","existingCertificate","create","issued_date","Date","certificate_url","json","message","console","error"],"mappings":";;eAAsBA,OAAO,CAAC,cAAD,C;IAArBC,S,YAAAA,S,EAAuC;;;AAC/C,IAAMC,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,uBAAD,CAA3B,C,CAEA;;;AACAI,OAAO,CAACC,yBAAR,GAAoC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhC;AACMC,UAAAA,KAH0B;AAAA;AAAA,0CAkD1BP,SAAS,CAACO,KAAV,CAAgBA,KAAhB,CAlD0B;;AAAA;AAAA;AAAA,0CAqDNN,eAAe,CAACO,OAAhB,CAAwB;AAChDC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,MAAM,EAAE;AAAV;AADyC,WAAxB,CArDM;;AAAA;AAqD1BC,UAAAA,WArD0B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAyDPA,WAzDO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyDrBC,UAAAA,UAzDqB;AAAA;AAAA,0CA2DIV,WAAW,CAACW,OAAZ,CAAoB;AAAEJ,YAAAA,KAAK,EAAE;AAAEK,cAAAA,OAAO,EAAEF,UAAU,CAACE;AAAtB;AAAT,WAApB,CA3DJ;;AAAA;AA2DxBC,UAAAA,mBA3DwB;;AAAA,cA4DzBA,mBA5DyB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CA8DtBb,WAAW,CAACc,MAAZ,CAAmB;AACvBF,YAAAA,OAAO,EAAEF,UAAU,CAACE,OADG;AAEvBG,YAAAA,WAAW,EAAE,IAAIC,IAAJ,EAFU;AAGvBC,YAAAA,eAAe,6CAAsCP,UAAU,CAACE,OAAjD,SAHQ,CAGuD;;AAHvD,WAAnB,CA9DsB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAsEhCR,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AAtEgC;AAAA;;AAAA;AAAA;AAAA;AAwEhCC,UAAAA,OAAO,CAACC,KAAR,CAAc,4CAAd,EAA4D,YAAMF,OAAlE;AACAf,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEG,YAAAA,KAAK,EAAE,YAAMF;AAAf,WAArB;;AAzEgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC","sourcesContent":["const { sequelize } = require('../config/db'); // Import sequelize for raw queries\r\nconst FinalEvaluation = require('../models/FinalEvaluation');\r\nconst Certificate = require('../models/Certificate');\r\n\r\n// Calculate and populate final evaluation scores\r\nexports.calculateFinalEvaluations = async (req, res) => {\r\n  try {\r\n    // Calculate scores and update final_evaluation table\r\n    const query = `\r\n      INSERT INTO final_evaluation (user_id, attendance_score, challenge_score, task_score, total_score, status)\r\n      SELECT \r\n        u.user_id,\r\n        (SUM(CASE \r\n          WHEN a.status = 'hadir' THEN 10\r\n          WHEN a.status = 'izin' THEN 5\r\n          ELSE 0\r\n        END) / COUNT(DISTINCT a.attendance_id)) AS attendance_score,\r\n        COALESCE(AVG(cs.score), 0) AS challenge_score,\r\n        COALESCE(AVG(ts.score), 0) AS task_score,\r\n        LEAST(\r\n          100,  -- Maximum score limit\r\n          ((SUM(CASE \r\n            WHEN a.status = 'hadir' THEN 10\r\n            WHEN a.status = 'izin' THEN 5\r\n            ELSE 0\r\n          END) / COUNT(DISTINCT a.attendance_id)) + \r\n          COALESCE(AVG(cs.score), 0) + \r\n          COALESCE(AVG(ts.score), 0))\r\n        ) AS total_score,\r\n        CASE \r\n          WHEN LEAST(\r\n            100, \r\n            ((SUM(CASE \r\n              WHEN a.status = 'hadir' THEN 10\r\n              WHEN a.status = 'izin' THEN 5\r\n              ELSE 0\r\n            END) / COUNT(DISTINCT a.attendance_id)) + \r\n            COALESCE(AVG(cs.score), 0) + \r\n            COALESCE(AVG(ts.score), 0))\r\n          ) >= 75 THEN 'pass'\r\n          ELSE 'fail'\r\n        END AS status\r\n      FROM user u\r\n      LEFT JOIN attendance a ON u.user_id = a.user_id\r\n      LEFT JOIN challenge_submission cs ON u.user_id = cs.user_id\r\n      LEFT JOIN task_submission ts ON u.user_id = ts.user_id\r\n      GROUP BY u.user_id\r\n      ON DUPLICATE KEY UPDATE \r\n        attendance_score = VALUES(attendance_score),\r\n        challenge_score = VALUES(challenge_score),\r\n        task_score = VALUES(task_score),\r\n        total_score = VALUES(total_score),\r\n        status = VALUES(status);\r\n    `;\r\n\r\n    await sequelize.query(query);\r\n\r\n    // Generate certificates for users who passed\r\n    const passedUsers = await FinalEvaluation.findAll({\r\n      where: { status: 'pass' }\r\n    });\r\n\r\n    for (const evaluation of passedUsers) {\r\n      // Check if the user has already received a certificate\r\n      const existingCertificate = await Certificate.findOne({ where: { user_id: evaluation.user_id } });\r\n      if (!existingCertificate) {\r\n        // Create a certificate with a downloadable URL\r\n        await Certificate.create({\r\n          user_id: evaluation.user_id,\r\n          issued_date: new Date(),\r\n          certificate_url: `https://example.com/certificates/${evaluation.user_id}.pdf` // Example URL\r\n        });\r\n      }\r\n    }\r\n\r\n    res.status(200).json({ message: 'Final evaluations calculated and certificates generated for passed users.' });\r\n  } catch (error) {\r\n    console.error(\"Error during final evaluation calculation:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};"],"file":"finalEvaluationController.dev.js"}