{"version":3,"sources":["groupController.js"],"names":["Group","require","Mentor","User","exports","Period","req","res","_req$body","group_name","mentor1_id","mentor2_id","period_id","mentor1","mentor2","period","newGroup","regeneratorRuntime","async","_context","prev","next","body","awrap","findByPk","createGroup","sent","abrupt","status","json","message","create","t0","console","error","stop","addParticipantsToGroup","_req$body2","group_id","user_ids","group","users","_context2","findAll","where","user_id","role","participants","getGroups","groups","_context3","include","model"],"mappings":"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","file":"groupController.min.js","sourcesContent":["// controllers/groupController.js\r\nconst Group = require('../models/Group');\r\nconst Mentor = require('../models/Mentor');\r\nconst Period = require('../models/Period');\r\nconst User = require('../models/User');\r\n\r\n// Exporting the functions directly\r\nexports.createGroup = async (req, res) => {\r\n    const { group_name, mentor1_id, mentor2_id, period_id } = req.body;\r\n\r\n    try {\r\n        // Check if mentors and period exist\r\n        const mentor1 = await Mentor.findByPk(mentor1_id);\r\n        const mentor2 = await Mentor.findByPk(mentor2_id);\r\n        const period = await Period.findByPk(period_id);\r\n\r\n        if (!mentor1 || !mentor2 || !period) {\r\n            return res.status(400).json({ message: 'Mentor atau periode tidak valid.' });\r\n        }\r\n\r\n        // Create new group\r\n        const newGroup = await Group.create({ group_name, mentor1_id, mentor2_id });\r\n\r\n        return res.status(201).json({\r\n            message: 'Group created successfully',\r\n            group: newGroup,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during group creation:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat membuat grup.', error });\r\n    }\r\n};\r\n\r\nexports.addParticipantsToGroup = async (req, res) => {\r\n    const { group_id, user_ids } = req.body; // user_ids is an array of user IDs\r\n\r\n    try {\r\n        // Check if group exists\r\n        const group = await Group.findByPk(group_id);\r\n        if (!group) {\r\n            return res.status(404).json({ message: 'Group tidak ditemukan.' });\r\n        }\r\n\r\n        // Check if users exist and only take those with the role 'peserta'\r\n        const users = await User.findAll({\r\n            where: {\r\n                user_id: user_ids,\r\n                role: 'peserta' // Ensure only participants are taken\r\n            },\r\n        });\r\n\r\n        if (users.length === 0) {\r\n            return res.status(400).json({ message: 'Tidak ada pengguna yang valid untuk ditambahkan atau semua pengguna bukan peserta.' });\r\n        }\r\n\r\n        // Logic to add users to the group\r\n        // For example, we could create a pivot table to store this relationship\r\n        // await group.addUsers(users); // if using a pivot table\r\n\r\n        return res.status(200).json({\r\n            message: 'Pengguna berhasil ditambahkan ke grup.',\r\n            group,\r\n            participants: users,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during adding participants to group:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat menambahkan pengguna ke grup.', error });\r\n    }\r\n};\r\n\r\nexports.getGroups = async (req, res) => {\r\n    try {\r\n        const groups = await Group.findAll({\r\n            include: [{ model: Mentor }, { model: Period }],\r\n        });\r\n        return res.status(200).json(groups);\r\n    } catch (error) {\r\n        console.error(\"Error fetching groups:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat mengambil grup.', error });\r\n    }\r\n};"]}