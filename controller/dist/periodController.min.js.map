{"version":3,"sources":["periodController.js"],"names":["Period","require","exports","req","res","_req$body","period_name","start_date","end_date","newPeriod","regeneratorRuntime","async","_context","prev","next","body","awrap","create","sent","abrupt","status","json","message","period","t0","error","stop","getPeriods","periods","_context2","console","id","_req$body2","_context3","params","findByPk","update","deletePeriod","_context4","destroy"],"mappings":"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","file":"periodController.min.js","sourcesContent":["// controllers/periodController.js\r\nconst Period = require('../models/Period');\r\n\r\nexports.createPeriod = async (req, res) => {\r\n    const { period_name, start_date, end_date } = req.body;\r\n\r\n    try {\r\n        const newPeriod = await Period.create({\r\n            period_name,\r\n            start_date,\r\n            end_date,\r\n        });\r\n\r\n        return res.status(201).json({\r\n            message: 'Period created successfully',\r\n            period: newPeriod,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during period creation:\", error.message);\r\n        return res.status(500).json({ message: 'Error creating period.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.getPeriods = async (req, res) => {\r\n    try {\r\n        const periods = await Period.findAll();\r\n        return res.status(200).json(periods);\r\n    } catch (error) {\r\n        console.error(\"Error fetching periods:\", error.message);\r\n        return res.status(500).json({ message: 'Error fetching periods.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.updatePeriod = async (req, res) => {\r\n    const { id } = req.params;\r\n    const { period_name, start_date, end_date } = req.body;\r\n\r\n    try {\r\n        const period = await Period.findByPk(id);\r\n        if (!period) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n\r\n        await period.update({\r\n            period_name,\r\n            start_date,\r\n            end_date,\r\n        });\r\n\r\n        return res.status(200).json({\r\n            message: 'Period updated successfully',\r\n            period,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during period update:\", error.message);\r\n        return res.status(500).json({ message: 'Error updating period.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.deletePeriod = async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const period = await Period.findByPk(id);\r\n        if (!period) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n\r\n        await period.destroy();\r\n        return res.status(200).json({ message: 'Period deleted successfully' });\r\n    } catch (error) {\r\n        console.error(\"Error during period deletion:\", error.message);\r\n        return res.status(500).json({ message: 'Error deleting period.', error: error.message });\r\n    }\r\n};"]}