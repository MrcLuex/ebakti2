"use strict";var Task=require("../models/Task");exports.createTask=function(r,t){var a,s,n,u,o,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a=r.body,s=a.title,n=a.description,u=a.due_date,o=a.status,e.prev=1,e.next=4,regeneratorRuntime.awrap(Task.create({title:s,description:n,due_date:u,status:o}));case 4:return c=e.sent,e.abrupt("return",t.status(201).json({message:"Task created successfully",task:c}));case 8:return e.prev=8,e.t0=e.catch(1),console.error("Error during task creation:",e.t0.message),e.abrupt("return",t.status(500).json({message:"Terjadi kesalahan saat membuat tugas.",error:e.t0}));case 12:case"end":return e.stop()}},null,null,[[1,8]])},exports.getTasks=function(e,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Task.findAll());case 3:return t=e.sent,e.abrupt("return",r.status(200).json(t));case 7:return e.prev=7,e.t0=e.catch(0),console.error("Error fetching tasks:",e.t0.message),e.abrupt("return",r.status(500).json({message:"Terjadi kesalahan saat mengambil tugas.",error:e.t0}));case 11:case"end":return e.stop()}},null,null,[[0,7]])},exports.updateTask=function(r,t){var a,s,n,u,o,c,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a=r.params.id,s=r.body,n=s.title,u=s.description,o=s.due_date,c=s.status,e.prev=2,e.next=5,regeneratorRuntime.awrap(Task.findByPk(a));case 5:if(i=e.sent){e.next=8;break}return e.abrupt("return",t.status(404).json({message:"Task not found"}));case 8:return e.next=10,regeneratorRuntime.awrap(i.update({title:n,description:u,due_date:o,status:c}));case 10:return e.abrupt("return",t.status(200).json({message:"Task updated successfully",task:i}));case 13:return e.prev=13,e.t0=e.catch(2),console.error("Error during task update:",e.t0.message),e.abrupt("return",t.status(500).json({message:"Terjadi kesalahan saat memperbarui tugas.",error:e.t0}));case 17:case"end":return e.stop()}},null,null,[[2,13]])},exports.deleteTask=function(r,t){var a,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a=r.params.id,e.prev=1,e.next=4,regeneratorRuntime.awrap(Task.findByPk(a));case 4:if(s=e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Task not found"}));case 7:return e.next=9,regeneratorRuntime.awrap(s.destroy());case 9:return e.abrupt("return",t.status(200).json({message:"Task deleted successfully"}));case 12:return e.prev=12,e.t0=e.catch(1),console.error("Error during task deletion:",e.t0.message),e.abrupt("return",t.status(500).json({message:"Terjadi kesalahan saat menghapus tugas.",error:e.t0}));case 16:case"end":return e.stop()}},null,null,[[1,12]])};
//# sourceMappingURL=taskController.min.js.map
