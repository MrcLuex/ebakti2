{"version":3,"sources":["userController.js"],"names":["jwt","require","bcrypt","exports","req","res","body","email","password","name","gender","date_of_birth","student_id","department","address","hash","hashedPassword","User","create","role","newUser","status","json","_context","t0","message","error","findOne","where","user","token","sign","id","user_id","process","env","JWT_SECRET","expiresIn","console","log","_context2"],"mappings":"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","file":"userController.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('../models/User');\r\n\r\nexports.register = async (req, res) => {\r\n  const { email, password, name, gender, date_of_birth, student_id, department, address } = req.body;\r\n\r\n  try {\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Buat pengguna baru\r\n    const newUser = await User.create({\r\n      role: 'peserta', // Default role untuk registrasi\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n      gender,\r\n      date_of_birth,\r\n      student_id,\r\n      department,\r\n      address,\r\n    });\r\n\r\n    // Kirim respons sukses\r\n    res.status(201).json({\r\n      message: 'Registration successful',\r\n      user: {\r\n        id: newUser.user_id,\r\n        email: newUser.email,\r\n        name: newUser.name,\r\n        gender: newUser.gender,\r\n        date_of_birth: newUser.date_of_birth,\r\n        student_id: newUser.student_id,\r\n        department: newUser.department,\r\n        address: newUser.address,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during registration:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  console.log(\"Request Body:\", req.body); // Debugging log\r\n\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email and password are required' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ where: { email } });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: 'Email tidak ditemukan' });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Password salah' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user.user_id, role: user.role },\r\n      process.env.JWT_SECRET, // Pastikan JWT_SECRET diambil dari .env\r\n      { expiresIn: '24h' }\r\n    );\r\n\r\n    res.json({\r\n      message: 'Login successful',\r\n      token,\r\n      user: {\r\n        id: user.user_id,\r\n        email: user.email,\r\n        name: user.name,\r\n        gender: user.gender,\r\n        date_of_birth: user.date_of_birth,\r\n        student_id: user.student_id,\r\n        department: user.department,\r\n        address: user.address,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n"]}