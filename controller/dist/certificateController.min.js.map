{"version":3,"sources":["certificateController.js"],"names":["Certificate","require","PDFDocument","path","exports","generateCertificate","req","res","user_id","doc","certificatePath","newCertificate","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","where","sent","abrupt","status","json","message","join","__dirname","concat","fontSize","text","align","moveDown","existingCertificate","Date","toLocaleDateString","create","t0","error","stop"],"mappings":"aAAA,IAAMA,YAAcC,QAAQ,yBACtBC,YAAcD,QAAQ,UADtBD,GAAAA,QAAcC,MAGdE,KAAOF,QAAQ,QADrBG,QAAQC,oBAAR,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAKUR,EAAYF,EAAIW,KAAhBT,QALVM,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MAI8BlB,YAAAmB,QAAA,CAAAC,MAAA,CAAAZ,QAAAA,MAJ9B,KAAA,EAAA,GAAAM,EAAAO,KAAA,OAAAP,EAAAQ,OAAA,SAI8Bf,EAAAgB,OAAA,KAAAC,KAAA,CAAAC,QAAA,+CAJ9BX,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAKUR,EAAAA,IAAYF,YADQI,EAAAP,KAAAuB,KAAAC,UAAA,kBAAA,GAAAC,OAAApB,EAAA,SAK8BY,EAAAA,KAAAA,GAAAA,kBAAOV,IAATD,EAAAoB,SAL5B,IAAAC,KAAA,6BAAA,CAAAC,MAAA,WAmB1BtB,EAAIuB,WAnBsBvB,EAAAoB,SAAA,IAAAC,KAAA,sBAAA,CAAAC,MAAA,WAKpBE,EAAAA,WAiBNxB,EAAIoB,SAAS,IAAIC,KAAjB,aAAAF,OAAmCpB,GAAW,CAAEuB,MAAO,WAtB7BtB,EAAAuB,WAAAvB,EAAAoB,SAAA,IAAAC,KAAA,yCAAA,CAAAC,MAAA,WAAAtB,EAAAuB,WAAAvB,EAAAqB,KAAA,cAAAF,QAAA,IAAAM,MAAAC,sBAAA,CAAAJ,MAAA,WAOMN,EAAAA,MAXpCX,EAAAE,KAAA,GAAAJ,mBAAAM,MAI8BlB,YAAAoC,OAAA,CAU1B5B,QAAAA,EACMC,YAAM,IAAIP,KACVQ,gBAAAA,oCAAAA,OAAuCF,EAAvCE,WAhBV,KAAA,GAI8BC,EAJ9BG,EAAAO,KA0CId,EAAIgB,OAAO,KAAKC,KAAK,CApBrBf,QAAIoB,qCAAkDE,YAAOpB,IAtBjEG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAuB,GAAAvB,EAAA,MAAA,GAwBIL,QAAAA,MAAIoB,uCAAyCf,EAAAuB,GAAAZ,SAAEM,EAAAA,OAAAA,KAAOP,KAAA,CAAAc,MAAAxB,EAAAuB,GAAAZ,UAxB1D,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAyB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"certificateController.min.js","sourcesContent":["const Certificate = require('../models/Certificate');\r\nconst PDFDocument = require('pdfkit');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Generate a certificate for a user\r\nexports.generateCertificate = async (req, res) => {\r\n  const { user_id } = req.body;\r\n\r\n  try {\r\n    // Check if the user has a certificate already\r\n    const existingCertificate = await Certificate.findOne({ where: { user_id } });\r\n    if (existingCertificate) {\r\n      return res.status(400).json({ message: 'Certificate already exists for this user.' });\r\n    }\r\n\r\n    // Create a new PDF document\r\n    const doc = new PDFDocument();\r\n    const certificatePath = path.join(__dirname, '../certificates', `${user_id}.pdf`);\r\n\r\n    // Pipe the PDF into a file\r\n    doc.pipe(fs.createWriteStream(certificatePath));\r\n\r\n    // Add content to the PDF\r\n    doc.fontSize(25).text('Certificate of Achievement', { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(16).text(`This certifies that`, { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(20).text(`User  ID: ${user_id}`, { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(16).text('has successfully completed the course.', { align: 'center' });\r\n    doc.moveDown();\r\n    doc.text(`Issued on: ${new Date().toLocaleDateString()}`, { align: 'center' });\r\n\r\n    // Finalize the PDF and end the stream\r\n    doc.end();\r\n\r\n    // Create a new certificate record in the database\r\n    const newCertificate = await Certificate.create({\r\n      user_id,\r\n      issued_date: new Date(),\r\n      certificate_url: `https://example.com/certificates/${user_id}.pdf`, // Update this URL to point to the actual location\r\n    });\r\n\r\n    res.status(201).json({\r\n      message: 'Certificate generated successfully',\r\n      certificate: newCertificate,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during certificate generation:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};"]}