{"version":3,"sources":["medicalHistoryController.js"],"names":["MedicalHistory","require","exports","req","res","_req$body","user_id","medical_condition","medication","allergies","newHistory","regeneratorRuntime","async","_context","prev","next","body","awrap","create","sent","abrupt","status","json","message","t0","error","stop","getMedicalHistories","histories","_context2","history","console","id","_req$body2","_context3","params","findByPk","update","deleteMedicalHistory","_context4","destroy"],"mappings":"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","file":"medicalHistoryController.min.js","sourcesContent":["// controllers/medicalHistoryController.js\r\nconst MedicalHistory = require('../models/MedicalHistory');\r\n\r\nexports.createMedicalHistory = async (req, res) => {\r\n    const { user_id, medical_condition, medication, allergies } = req.body;\r\n\r\n    try {\r\n        const newHistory = await MedicalHistory.create({\r\n            user_id,\r\n            medical_condition,\r\n            medication,\r\n            allergies,\r\n        });\r\n\r\n        return res.status(201).json({\r\n            message: 'Medical history created successfully',\r\n            history: newHistory,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during medical history creation:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat membuat riwayat medis.', error });\r\n    }\r\n};\r\n\r\nexports.getMedicalHistories = async (req, res) => {\r\n    try {\r\n        const histories = await MedicalHistory.findAll();\r\n        return res.status(200).json(histories);\r\n    } catch (error) {\r\n        console.error(\"Error fetching medical histories:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat mengambil riwayat medis.', error });\r\n    }\r\n};\r\n\r\nexports.updateMedicalHistory = async (req, res) => {\r\n    const { id } = req.params;\r\n    const { medical_condition, medication, allergies } = req.body;\r\n\r\n    try {\r\n        const history = await MedicalHistory.findByPk(id);\r\n        if (!history) {\r\n            return res.status(404).json({ message: 'Medical history not found' });\r\n        }\r\n\r\n        await history.update({\r\n            medical_condition,\r\n            medication,\r\n            allergies,\r\n        });\r\n\r\n        return res.status(200).json({\r\n            message: 'Medical history updated successfully',\r\n            history,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during medical history update:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat memperbarui riwayat medis.', error });\r\n    }\r\n};\r\n\r\nexports.deleteMedicalHistory = async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const history = await MedicalHistory.findByPk(id);\r\n        if (!history) {\r\n            return res.status(404).json({ message: 'Medical history not found' });\r\n        }\r\n\r\n        await history.destroy();\r\n        return res.status(200).json({ message: 'Medical history deleted successfully' });\r\n    } catch (error) {\r\n        console.error(\"Error during medical history deletion:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat menghapus riwayat medis.', error });\r\n    }\r\n};"]}