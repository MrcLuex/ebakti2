{"version":3,"sources":["certificateController.js"],"names":["Certificate","require","PDFDocument","fs","path","exports","generateCertificate","req","res","user_id","body","findOne","where","existingCertificate","status","json","message","doc","certificatePath","join","__dirname","pipe","createWriteStream","fontSize","text","align","moveDown","Date","toLocaleDateString","end","create","issued_date","certificate_url","newCertificate","certificate","console","error"],"mappings":"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","sourcesContent":["const Certificate = require('../models/Certificate');\r\nconst PDFDocument = require('pdfkit');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Generate a certificate for a user\r\nexports.generateCertificate = async (req, res) => {\r\n  const { user_id } = req.body;\r\n\r\n  try {\r\n    // Check if the user has a certificate already\r\n    const existingCertificate = await Certificate.findOne({ where: { user_id } });\r\n    if (existingCertificate) {\r\n      return res.status(400).json({ message: 'Certificate already exists for this user.' });\r\n    }\r\n\r\n    // Create a new PDF document\r\n    const doc = new PDFDocument();\r\n    const certificatePath = path.join(__dirname, '../certificates', `${user_id}.pdf`);\r\n\r\n    // Pipe the PDF into a file\r\n    doc.pipe(fs.createWriteStream(certificatePath));\r\n\r\n    // Add content to the PDF\r\n    doc.fontSize(25).text('Certificate of Achievement', { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(16).text(`This certifies that`, { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(20).text(`User  ID: ${user_id}`, { align: 'center' });\r\n    doc.moveDown();\r\n    doc.fontSize(16).text('has successfully completed the course.', { align: 'center' });\r\n    doc.moveDown();\r\n    doc.text(`Issued on: ${new Date().toLocaleDateString()}`, { align: 'center' });\r\n\r\n    // Finalize the PDF and end the stream\r\n    doc.end();\r\n\r\n    // Create a new certificate record in the database\r\n    const newCertificate = await Certificate.create({\r\n      user_id,\r\n      issued_date: new Date(),\r\n      certificate_url: `https://example.com/certificates/${user_id}.pdf`, // Update this URL to point to the actual location\r\n    });\r\n\r\n    res.status(201).json({\r\n      message: 'Certificate generated successfully',\r\n      certificate: newCertificate,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during certificate generation:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};"],"file":"certificateController.dev.js"}