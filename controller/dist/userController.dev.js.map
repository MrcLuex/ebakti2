{"version":3,"sources":["userController.js"],"names":["jwt","require","bcrypt","User","exports","register","req","res","body","email","password","name","gender","date_of_birth","student_id","department","address","hash","hashedPassword","create","role","newUser","status","json","message","user","id","user_id","console","error","login","log","findOne","where","compare","isMatch","token","sign","process","env","JWT_SECRET","expiresIn"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('../models/User');\r\n\r\nexports.register = async (req, res) => {\r\n  const { email, password, name, gender, date_of_birth, student_id, department, address } = req.body;\r\n\r\n  try {\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Buat pengguna baru\r\n    const newUser = await User.create({\r\n      role: 'peserta', // Default role untuk registrasi\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n      gender,\r\n      date_of_birth,\r\n      student_id,\r\n      department,\r\n      address,\r\n    });\r\n\r\n    // Kirim respons sukses\r\n    res.status(201).json({\r\n      message: 'Registration successful',\r\n      user: {\r\n        id: newUser.user_id,\r\n        email: newUser.email,\r\n        name: newUser.name,\r\n        gender: newUser.gender,\r\n        date_of_birth: newUser.date_of_birth,\r\n        student_id: newUser.student_id,\r\n        department: newUser.department,\r\n        address: newUser.address,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during registration:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  console.log(\"Request Body:\", req.body); // Debugging log\r\n\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: 'Email and password are required' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.findOne({ where: { email } });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: 'Email tidak ditemukan' });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Password salah' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user.user_id, role: user.role },\r\n      process.env.JWT_SECRET, // Pastikan JWT_SECRET diambil dari .env\r\n      { expiresIn: '24h' }\r\n    );\r\n\r\n    res.json({\r\n      message: 'Login successful',\r\n      token,\r\n      user: {\r\n        id: user.user_id,\r\n        email: user.email,\r\n        name: user.name,\r\n        gender: user.gender,\r\n        date_of_birth: user.date_of_birth,\r\n        student_id: user.student_id,\r\n        department: user.department,\r\n        address: user.address,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n"],"file":"userController.dev.js"}