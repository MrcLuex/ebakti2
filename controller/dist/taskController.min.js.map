{"version":3,"sources":["taskController.js"],"names":["Task","require","exports","createTask","req","res","_req$body","title","description","due_date","status","newTask","regeneratorRuntime","async","_context","prev","next","body","awrap","create","sent","abrupt","json","message","t0","error","stop","getTasks","tasks","_context2","task","console","id","_req$body2","_context3","params","findByPk","update","deleteTask","_context4","destroy"],"mappings":"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","file":"taskController.min.js","sourcesContent":["// controllers/taskController.js\r\nconst Task = require('../models/Task');\r\n\r\nexports.createTask = async (req, res) => {\r\n    const { title, description, due_date, status } = req.body;\r\n\r\n    try {\r\n        const newTask = await Task.create({\r\n            title,\r\n            description,\r\n            due_date,\r\n            status,\r\n        });\r\n\r\n        return res.status(201).json({\r\n            message: 'Task created successfully',\r\n            task: newTask,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during task creation:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat membuat tugas.', error });\r\n    }\r\n};\r\n\r\nexports.getTasks = async (req, res) => {\r\n    try {\r\n        const tasks = await Task.findAll();\r\n        return res.status(200).json(tasks);\r\n    } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat mengambil tugas.', error });\r\n    }\r\n};\r\n\r\nexports.updateTask = async (req, res) => {\r\n    const { id } = req.params;\r\n    const { title, description, due_date, status } = req.body;\r\n\r\n    try {\r\n        const task = await Task.findByPk(id);\r\n        if (!task) {\r\n            return res.status(404).json({ message: 'Task not found' });\r\n        }\r\n\r\n        await task.update({\r\n            title,\r\n            description,\r\n            due_date,\r\n            status,\r\n        });\r\n\r\n        return res.status(200).json({\r\n            message: 'Task updated successfully',\r\n            task,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during task update:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat memperbarui tugas.', error });\r\n    }\r\n};\r\n\r\nexports.deleteTask = async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const task = await Task.findByPk(id);\r\n        if (!task) {\r\n            return res.status(404).json({ message: 'Task not found' });\r\n        }\r\n\r\n        await task.destroy();\r\n        return res.status(200).json({ message: 'Task deleted successfully' });\r\n    } catch (error) {\r\n        console.error(\"Error during task deletion:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat menghapus tugas.', error });\r\n    }\r\n};"]}