{"version":3,"sources":["finalEvaluationController.js"],"names":["require","sequelize","FinalEvaluation","Certificate","exports","calculateFinalEvaluations","req","res","passedUsers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","evaluation","regeneratorRuntime","async","_context","prev","next","awrap","existingCertificate","findAll","where","status","sent","undefined","Symbol","iterator","done","value","findOne","user_id","create","issued_date","Date","certificate_url","concat","t0","finish","json","message","t1","console","error","stop"],"mappings":"0BAAsBA,QAAQ,gBAAtBC,mBAAAA,UACFC,gBAAkBF,QAAQ,6BAC1BG,YAFgBH,QAAQ,yBAK9BI,QAAQC,0BAA4B,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAA,yqDAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MA2DxBC,UAAAA,MA3DwB,2qDAAA,KAAA,EAAA,OAAAJ,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAlB,gBAAAoB,QAAA,CAAAC,MAAA,CAAAC,OAAA,WAAA,KAAA,EAAAhB,EAAAS,EAAAQ,KAAAf,IAAAD,GAAA,GAAAE,OAAAe,EAAAT,EAAAC,KAAA,GAAAN,EAAAJ,EAAAmB,OAAAC,YAAA,KAAA,GAAA,GAAAnB,GAAAI,EAAAD,EAAAO,QAAAU,KAAA,CAAAZ,EAAAE,KAAA,GAAA,MAAA,OAAAL,EAAAD,EAAAiB,MAAAb,EAAAE,KAAA,GAAAJ,mBAAAK,MA8DHjB,YAAA4B,QAAA,CAAAR,MAAA,CAAAS,QAAAlB,EAAAkB,YA9DG,KAAA,GAAA,GAAAf,EAAAQ,KAAA,CAAAR,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAK,MA8DtBjB,YAAY8B,OAAO,CAAAD,QA9DGlB,EAAAkB,QAgE1BE,YAAa,IAAIC,KAhESC,gBAAA,oCAAAC,OAAAvB,EAAAkB,QAAA,WAAA,KAAA,GAAAvB,GAAA,EAAAQ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,IAAAP,GAAA,EAAAC,EAAAM,EAAAqB,GAAA,KAAA,GAAArB,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAT,GAAA,MAAAG,EAAA,QAAAA,EAAA,SAAA,KAAA,GAAA,GAAAK,EAAAC,KAAA,GAAAR,EAAA,MAAAC,EAAAM,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAsB,OAAA,IAAA,KAAA,GAAA,OAAAtB,EAAAsB,OAAA,IAAA,KAAA,GAAAhC,EAAAiB,OAAA,KAAAgB,KAAA,CAAAC,QAAA,8EAAAxB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,GAAA0B,QAAAC,MAAA,6CAAA3B,EAAAyB,GAAAD,SAyEhClC,EAAIiB,OAAO,KAAKgB,KAAK,CAAEI,MAAO3B,EAAAyB,GAAMD,UAzEJ,KAAA,GAAA,IAAA,MAAA,OAAAxB,EAAA4B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA","file":"finalEvaluationController.min.js","sourcesContent":["const { sequelize } = require('../config/db'); // Import sequelize for raw queries\r\nconst FinalEvaluation = require('../models/FinalEvaluation');\r\nconst Certificate = require('../models/Certificate');\r\n\r\n// Calculate and populate final evaluation scores\r\nexports.calculateFinalEvaluations = async (req, res) => {\r\n  try {\r\n    // Calculate scores and update final_evaluation table\r\n    const query = `\r\n      INSERT INTO final_evaluation (user_id, attendance_score, challenge_score, task_score, total_score, status)\r\n      SELECT \r\n        u.user_id,\r\n        (SUM(CASE \r\n          WHEN a.status = 'hadir' THEN 10\r\n          WHEN a.status = 'izin' THEN 5\r\n          ELSE 0\r\n        END) / COUNT(DISTINCT a.attendance_id)) AS attendance_score,\r\n        COALESCE(AVG(cs.score), 0) AS challenge_score,\r\n        COALESCE(AVG(ts.score), 0) AS task_score,\r\n        LEAST(\r\n          100,  -- Maximum score limit\r\n          ((SUM(CASE \r\n            WHEN a.status = 'hadir' THEN 10\r\n            WHEN a.status = 'izin' THEN 5\r\n            ELSE 0\r\n          END) / COUNT(DISTINCT a.attendance_id)) + \r\n          COALESCE(AVG(cs.score), 0) + \r\n          COALESCE(AVG(ts.score), 0))\r\n        ) AS total_score,\r\n        CASE \r\n          WHEN LEAST(\r\n            100, \r\n            ((SUM(CASE \r\n              WHEN a.status = 'hadir' THEN 10\r\n              WHEN a.status = 'izin' THEN 5\r\n              ELSE 0\r\n            END) / COUNT(DISTINCT a.attendance_id)) + \r\n            COALESCE(AVG(cs.score), 0) + \r\n            COALESCE(AVG(ts.score), 0))\r\n          ) >= 75 THEN 'pass'\r\n          ELSE 'fail'\r\n        END AS status\r\n      FROM user u\r\n      LEFT JOIN attendance a ON u.user_id = a.user_id\r\n      LEFT JOIN challenge_submission cs ON u.user_id = cs.user_id\r\n      LEFT JOIN task_submission ts ON u.user_id = ts.user_id\r\n      GROUP BY u.user_id\r\n      ON DUPLICATE KEY UPDATE \r\n        attendance_score = VALUES(attendance_score),\r\n        challenge_score = VALUES(challenge_score),\r\n        task_score = VALUES(task_score),\r\n        total_score = VALUES(total_score),\r\n        status = VALUES(status);\r\n    `;\r\n\r\n    await sequelize.query(query);\r\n\r\n    // Generate certificates for users who passed\r\n    const passedUsers = await FinalEvaluation.findAll({\r\n      where: { status: 'pass' }\r\n    });\r\n\r\n    for (const evaluation of passedUsers) {\r\n      // Check if the user has already received a certificate\r\n      const existingCertificate = await Certificate.findOne({ where: { user_id: evaluation.user_id } });\r\n      if (!existingCertificate) {\r\n        // Create a certificate with a downloadable URL\r\n        await Certificate.create({\r\n          user_id: evaluation.user_id,\r\n          issued_date: new Date(),\r\n          certificate_url: `https://example.com/certificates/${evaluation.user_id}.pdf` // Example URL\r\n        });\r\n      }\r\n    }\r\n\r\n    res.status(200).json({ message: 'Final evaluations calculated and certificates generated for passed users.' });\r\n  } catch (error) {\r\n    console.error(\"Error during final evaluation calculation:\", error.message);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};"]}