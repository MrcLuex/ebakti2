"use strict";var _require=require("../config/db"),sequelize=_require.sequelize,FinalEvaluation=require("../models/FinalEvaluation"),Certificate=require("../models/Certificate");exports.calculateFinalEvaluations=function(e,n){var s,a,t,r,c,i,E;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,"\n      INSERT INTO final_evaluation (user_id, attendance_score, challenge_score, task_score, total_score, status)\n      SELECT \n        u.user_id,\n        (SUM(CASE \n          WHEN a.status = 'hadir' THEN 10\n          WHEN a.status = 'izin' THEN 5\n          ELSE 0\n        END) / COUNT(DISTINCT a.attendance_id)) AS attendance_score,\n        COALESCE(AVG(cs.score), 0) AS challenge_score,\n        COALESCE(AVG(ts.score), 0) AS task_score,\n        LEAST(\n          100,  -- Maximum score limit\n          ((SUM(CASE \n            WHEN a.status = 'hadir' THEN 10\n            WHEN a.status = 'izin' THEN 5\n            ELSE 0\n          END) / COUNT(DISTINCT a.attendance_id)) + \n          COALESCE(AVG(cs.score), 0) + \n          COALESCE(AVG(ts.score), 0))\n        ) AS total_score,\n        CASE \n          WHEN LEAST(\n            100, \n            ((SUM(CASE \n              WHEN a.status = 'hadir' THEN 10\n              WHEN a.status = 'izin' THEN 5\n              ELSE 0\n            END) / COUNT(DISTINCT a.attendance_id)) + \n            COALESCE(AVG(cs.score), 0) + \n            COALESCE(AVG(ts.score), 0))\n          ) >= 75 THEN 'pass'\n          ELSE 'fail'\n        END AS status\n      FROM user u\n      LEFT JOIN attendance a ON u.user_id = a.user_id\n      LEFT JOIN challenge_submission cs ON u.user_id = cs.user_id\n      LEFT JOIN task_submission ts ON u.user_id = ts.user_id\n      GROUP BY u.user_id\n      ON DUPLICATE KEY UPDATE \n        attendance_score = VALUES(attendance_score),\n        challenge_score = VALUES(challenge_score),\n        task_score = VALUES(task_score),\n        total_score = VALUES(total_score),\n        status = VALUES(status);\n    ",e.next=4,regeneratorRuntime.awrap(sequelize.query("\n      INSERT INTO final_evaluation (user_id, attendance_score, challenge_score, task_score, total_score, status)\n      SELECT \n        u.user_id,\n        (SUM(CASE \n          WHEN a.status = 'hadir' THEN 10\n          WHEN a.status = 'izin' THEN 5\n          ELSE 0\n        END) / COUNT(DISTINCT a.attendance_id)) AS attendance_score,\n        COALESCE(AVG(cs.score), 0) AS challenge_score,\n        COALESCE(AVG(ts.score), 0) AS task_score,\n        LEAST(\n          100,  -- Maximum score limit\n          ((SUM(CASE \n            WHEN a.status = 'hadir' THEN 10\n            WHEN a.status = 'izin' THEN 5\n            ELSE 0\n          END) / COUNT(DISTINCT a.attendance_id)) + \n          COALESCE(AVG(cs.score), 0) + \n          COALESCE(AVG(ts.score), 0))\n        ) AS total_score,\n        CASE \n          WHEN LEAST(\n            100, \n            ((SUM(CASE \n              WHEN a.status = 'hadir' THEN 10\n              WHEN a.status = 'izin' THEN 5\n              ELSE 0\n            END) / COUNT(DISTINCT a.attendance_id)) + \n            COALESCE(AVG(cs.score), 0) + \n            COALESCE(AVG(ts.score), 0))\n          ) >= 75 THEN 'pass'\n          ELSE 'fail'\n        END AS status\n      FROM user u\n      LEFT JOIN attendance a ON u.user_id = a.user_id\n      LEFT JOIN challenge_submission cs ON u.user_id = cs.user_id\n      LEFT JOIN task_submission ts ON u.user_id = ts.user_id\n      GROUP BY u.user_id\n      ON DUPLICATE KEY UPDATE \n        attendance_score = VALUES(attendance_score),\n        challenge_score = VALUES(challenge_score),\n        task_score = VALUES(task_score),\n        total_score = VALUES(total_score),\n        status = VALUES(status);\n    "));case 4:return e.next=6,regeneratorRuntime.awrap(FinalEvaluation.findAll({where:{status:"pass"}}));case 6:s=e.sent,t=!(a=!0),r=void 0,e.prev=10,c=s[Symbol.iterator]();case 12:if(a=(i=c.next()).done){e.next=23;break}return E=i.value,e.next=16,regeneratorRuntime.awrap(Certificate.findOne({where:{user_id:E.user_id}}));case 16:if(e.sent){e.next=20;break}return e.next=20,regeneratorRuntime.awrap(Certificate.create({user_id:E.user_id,issued_date:new Date,certificate_url:"https://example.com/certificates/".concat(E.user_id,".pdf")}));case 20:a=!0,e.next=12;break;case 23:e.next=29;break;case 25:e.prev=25,e.t0=e.catch(10),t=!0,r=e.t0;case 29:e.prev=29,e.prev=30,a||null==c.return||c.return();case 32:if(e.prev=32,t)throw r;e.next=35;break;case 35:return e.finish(32);case 36:return e.finish(29);case 37:n.status(200).json({message:"Final evaluations calculated and certificates generated for passed users."}),e.next=44;break;case 40:e.prev=40,e.t1=e.catch(0),console.error("Error during final evaluation calculation:",e.t1.message),n.status(500).json({error:e.t1.message});case 44:case"end":return e.stop()}},null,null,[[0,40],[10,25,29,37],[30,,32,36]])};
//# sourceMappingURL=finalEvaluationController.min.js.map
