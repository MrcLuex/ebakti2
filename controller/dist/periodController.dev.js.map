{"version":3,"sources":["periodController.js"],"names":["Period","require","exports","createPeriod","req","res","body","period_name","start_date","end_date","create","newPeriod","status","json","message","period","console","error","getPeriods","findAll","periods","updatePeriod","id","params","findByPk","update","deletePeriod","destroy"],"mappings":"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","sourcesContent":["// controllers/periodController.js\r\nconst Period = require('../models/Period');\r\n\r\nexports.createPeriod = async (req, res) => {\r\n    const { period_name, start_date, end_date } = req.body;\r\n\r\n    try {\r\n        const newPeriod = await Period.create({\r\n            period_name,\r\n            start_date,\r\n            end_date,\r\n        });\r\n\r\n        return res.status(201).json({\r\n            message: 'Period created successfully',\r\n            period: newPeriod,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during period creation:\", error.message);\r\n        return res.status(500).json({ message: 'Error creating period.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.getPeriods = async (req, res) => {\r\n    try {\r\n        const periods = await Period.findAll();\r\n        return res.status(200).json(periods);\r\n    } catch (error) {\r\n        console.error(\"Error fetching periods:\", error.message);\r\n        return res.status(500).json({ message: 'Error fetching periods.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.updatePeriod = async (req, res) => {\r\n    const { id } = req.params;\r\n    const { period_name, start_date, end_date } = req.body;\r\n\r\n    try {\r\n        const period = await Period.findByPk(id);\r\n        if (!period) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n\r\n        await period.update({\r\n            period_name,\r\n            start_date,\r\n            end_date,\r\n        });\r\n\r\n        return res.status(200).json({\r\n            message: 'Period updated successfully',\r\n            period,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during period update:\", error.message);\r\n        return res.status(500).json({ message: 'Error updating period.', error: error.message });\r\n    }\r\n};\r\n\r\nexports.deletePeriod = async (req, res) => {\r\n    const { id } = req.params;\r\n\r\n    try {\r\n        const period = await Period.findByPk(id);\r\n        if (!period) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n\r\n        await period.destroy();\r\n        return res.status(200).json({ message: 'Period deleted successfully' });\r\n    } catch (error) {\r\n        console.error(\"Error during period deletion:\", error.message);\r\n        return res.status(500).json({ message: 'Error deleting period.', error: error.message });\r\n    }\r\n};"],"file":"periodController.dev.js"}