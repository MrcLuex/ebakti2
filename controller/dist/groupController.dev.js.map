{"version":3,"sources":["groupController.js"],"names":["Group","require","Mentor","Period","User","exports","createGroup","req","res","body","group_name","mentor1_id","mentor2_id","period_id","findByPk","mentor1","mentor2","period","status","json","message","create","newGroup","group","console","error","addParticipantsToGroup","group_id","user_ids","findAll","where","user_id","role","users","length","participants","getGroups","include","model","groups"],"mappings":"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","sourcesContent":["// controllers/groupController.js\r\nconst Group = require('../models/Group');\r\nconst Mentor = require('../models/Mentor');\r\nconst Period = require('../models/Period');\r\nconst User = require('../models/User');\r\n\r\n// Exporting the functions directly\r\nexports.createGroup = async (req, res) => {\r\n    const { group_name, mentor1_id, mentor2_id, period_id } = req.body;\r\n\r\n    try {\r\n        // Check if mentors and period exist\r\n        const mentor1 = await Mentor.findByPk(mentor1_id);\r\n        const mentor2 = await Mentor.findByPk(mentor2_id);\r\n        const period = await Period.findByPk(period_id);\r\n\r\n        if (!mentor1 || !mentor2 || !period) {\r\n            return res.status(400).json({ message: 'Mentor atau periode tidak valid.' });\r\n        }\r\n\r\n        // Create new group\r\n        const newGroup = await Group.create({ group_name, mentor1_id, mentor2_id });\r\n\r\n        return res.status(201).json({\r\n            message: 'Group created successfully',\r\n            group: newGroup,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during group creation:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat membuat grup.', error });\r\n    }\r\n};\r\n\r\nexports.addParticipantsToGroup = async (req, res) => {\r\n    const { group_id, user_ids } = req.body; // user_ids is an array of user IDs\r\n\r\n    try {\r\n        // Check if group exists\r\n        const group = await Group.findByPk(group_id);\r\n        if (!group) {\r\n            return res.status(404).json({ message: 'Group tidak ditemukan.' });\r\n        }\r\n\r\n        // Check if users exist and only take those with the role 'peserta'\r\n        const users = await User.findAll({\r\n            where: {\r\n                user_id: user_ids,\r\n                role: 'peserta' // Ensure only participants are taken\r\n            },\r\n        });\r\n\r\n        if (users.length === 0) {\r\n            return res.status(400).json({ message: 'Tidak ada pengguna yang valid untuk ditambahkan atau semua pengguna bukan peserta.' });\r\n        }\r\n\r\n        // Logic to add users to the group\r\n        // For example, we could create a pivot table to store this relationship\r\n        // await group.addUsers(users); // if using a pivot table\r\n\r\n        return res.status(200).json({\r\n            message: 'Pengguna berhasil ditambahkan ke grup.',\r\n            group,\r\n            participants: users,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error during adding participants to group:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat menambahkan pengguna ke grup.', error });\r\n    }\r\n};\r\n\r\nexports.getGroups = async (req, res) => {\r\n    try {\r\n        const groups = await Group.findAll({\r\n            include: [{ model: Mentor }, { model: Period }],\r\n        });\r\n        return res.status(200).json(groups);\r\n    } catch (error) {\r\n        console.error(\"Error fetching groups:\", error.message);\r\n        return res.status(500).json({ message: 'Terjadi kesalahan saat mengambil grup.', error });\r\n    }\r\n};"],"file":"groupController.dev.js"}